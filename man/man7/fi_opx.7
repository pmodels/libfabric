.TH "fi_opx" "7" "2021\-07\-27" "Libfabric Programmer\[aq]s Manual" "\@VERSION\@"
.SH NAME
.PP
The Omni-Path Express Fabric Provider
.SH OVERVIEW
.PP
The OPX provider is a native implementation of the libfabric interfaces
that makes direct use of Omni-Path fabrics as well as libfabric
acceleration features.
.PP
The purpose of this provider is to showthe scalability and
performance of libfabric, providing an "extreme scale" development
environment for applications and middleware using the libfabric API, and
to support a functional and performant version of MPI on Omni-Path fabrics.
.SH SUPPORTED FEATURES
.PP
The OPX provider supports most features defined for the libfabric API.
.PP
Key features include:
.PP
\f[I]Endpoint types\f[] : The Omni-Path HFI hardware is connectionless and
reliable.
The OPX provider only supports the \f[I]FI_EP_RDM\f[] endpoint type.
.PP
\f[I]Capabilities\f[] : Supported capabilities include \f[I]FI_MSG\f[],
\f[I]FI_RMA\f[], \f[I]FI_TAGGED\f[], \f[I]FI_ATOMIC\f[],
\f[I]FI_NAMED_RX_CTX\f[], \f[I]FI_SOURCE\f[], \f[I]FI_SEND\f[], \f[I]FI_RECV\f[],
\f[I]FI_MULTI_RECV\f[], \f[I]FI_DIRECTED_RECV\f[], \f[I]FI_SOURCE\f[].
.PP
Notes on FI_DIRECTED_RECV capability: The immediate data which is sent
within the \f[I]senddata\f[] call to support FI_DIRECTED_RECV for OPX 
must be exactly 4 bytes, which OPX uses to completely identify the
source address to an exascale\-level number of ranks for tag matching on
the recv and can be managed within the MU packet.
Therefore the domain attribute cq_data_size is set to 4 which is the OFI
standard minimum.
.PP
\f[I]Modes\f[] : Two modes are defined:  \f[I]FI_CONTEXT2\f[] and  \f[I]FI_ASYNC_IOV\f[].
The OPX provider requires \f[I]FI_CONTEXT2\f[].
.PP
\f[I]Additional features\f[] : Supported additional features include
\f[I]FABRIC_DIRECT\f[], \f[I]scalable endpoints\f[], and
\f[I]counters\f[].
.PP
\f[I]Progress\f[] : Only \f[I]FI_PROGRESS_MANUAL\f[] is supported.
.PP
\f[I]Address vector\f[] : Only the \f[I]FI_AV_MAP\f[] address vector
format is supported.
.PP
\f[I]Memory registration modes\f[] : Only \f[I]FI_MR_SCALABLE\f[] is supported.

.SH UNSUPPORTED FEATURES
.PP
\f[I]Endpoint types\f[] : Unsupported endpoint types include
\f[I]FI_EP_DGRAM\f[] and \f[I]FI_EP_MSG\f[]
.PP
\f[I]Capabilities\f[] : The OPX provider does not support
\f[I]FI_RMA_EVENT\f[] and \f[I]FI_TRIGGER\f[] capabilities.
.PP
\f[I]Address vector\f[] : The OPX provider does not support the
\f[I]FI_AV_TABLE\f[] address vector format. This may be added in the future.
.SH LIMITATIONS
.PP
As OPX is under development this list of limitations is subject
to change.
.PP

It runs under the following MPI versions:
.br
Intel MPI from Parallel Studio 2020, update 4.
.br
Intel MPI from OneAPI 2021, update 3.
.br
Open MPI 4.1.2a1 (Older version of Open MPI will not work).
.br
MPICH 3.4.2.
.br
Currently, this provider is PIO-only. SDMA is not supported at this time.
.sp
.PP
Usage:
.br
If using with OpenMPI 4.1.x, disable UCX and openib transports.
.br
OPX is not compatible with Open MPI 4.1.x PML/BTL.
.br
DMA, RDMA and SDMA are not implemented.
.br
Performance falls off when using message sizes larger than 
1 MTU (4K max size). 
.br
Shared memory is not cleaned up after an application crashes. Use
"rm -rf /dev/shm/*" to remove old shared-memory files.

.SH ENVIRONMENT VARIABLES
.PP
This is a list of all OPX environment variables that a user may
want to enable.
.br
.TP
.B \f[I]FI_PROVIDER\f[R]
Although technically not an OPX environment variable, this one 
indicates libfabric to use the OPX provider. It can be set by 
using FI_PROVIDER=opx.
.TP
.B \f[I]FI_OPX_UUID\f[R]
OPX requires a unique ID for each job. In order for all processes in a
job to communicate with each other, they require to use the same UUID.
This variable can be set with FI_OPX_UUID=${RANDOM} 
.br
The default UUID is 00112233445566778899aabbccddeeff.

.TP
.B \f[I]FI_OPX_RELIABILITY_SERVICE_USEC_MAX\f[R]
This setting controls how frequently the reliability/replay function
will issue PING requests to a remote connection. Reducing this value
may improve performance at the expense of increased traffic on the OPX fabric.
.br
Default setting is 100.
.TP
.B \f[I]FI_OPX_HFI_SELECT\f[R]
Controls how OPX chooses which HFI to use when opening a context.

Has two forms:

- \f[I]<hfi-unit>\f[]
Force OPX provider to use \f[I]hfi-unit\f[].

- <\f[I]selector1\f[]>[,<\f[I]selector2\f[]>[,...,<\f[I]selectorN\f[]>]]
Select HFI based on first matching \f[I]selector\f[]

Where \f[I]selector\f[] consists of:

- <\f[I]selector-type\f[]>:<\f[I]hfi-unit\f[]>:<\f[I]selector-data\f[]>

The above fields have the following meaning:

- \f[I]selector-type\f[]
The selector criteria the caller opening the context is evaluated against.

- \f[I]hfi-unit\f[]
The HFI to use if the caller matches the selector.

- \f[I]selector-data\f[]
Data the caller must match (e.g. NUMA node ID).

Where \f[I]selector-type\f[] is one of the following:

- \f[I]numa\f[]
True when caller is local to the NUMA node ID given by \f[I]selector-data\f[].

In the second form, when opening a context, OPX uses the \f[I]hfi-unit\f[] of the
first-matching selector. Selectors are evaluated left-to-right. OPX will
return an error if the caller does not match any selector.

In either form, it is an error if the specified or selected HFI is not in the
Active state.
In this case, OPX will return an error and execution will not continue.

With this option, it is possible to cause OPX to try to open more contexts on
an HFI than there are free contexts on that HFI. In this case, one or more of
the context-opening calls will fail and OPX will return an error.
For the second form, as which HFI is selected depends on properties of the caller,
deterministic HFI selection requires deterministic caller properties. E.g.
for the \f[I]numa\f[] selector, if the caller can migrate between NUMA domains,
then HFI selection will not be deterministic.

Examples:

- \f[I]FI_OPX_HFI_SELECT=1\f[] all callers will open contexts on HFI 0.

- \f[I]FI_OPX_HFI_SELECT=numa:0:0,numa:1:1,numa:0:2,numa:1:3\f[]
callers local to NUMA nodes 0 and 2 will use HFI 0, callers local to NUMA
domains 1 and 3 will use HFI 1.


.SH RUNTIME PARAMETERS
.PP
Environment variables starting with FI are Libfabric related.
.br
OPX provider requires the following  environment variables:
.TP
.B \f[I]FI_PROVIDER\f[R]
This can be set using FI_PROVIDER=opx.
.TP

.SH SEE ALSO
.PP
\f[C]fabric\f[](7), \f[C]fi_provider\f[](7), \f[C]fi_getinfo\f[](3)
.SH AUTHORS
Cornelis Networks.
